// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
   
model User {
  id    Int     @default(autoincrement()) @id
  name  String?
  surname String?
  username  String?
  organization String?
  position  String?
  phone  String?
  email String?
  balance Int? @default(0)
  company_name String?
  organizational_forms String?
  ogrn String?
  inn String?
  bank_bic String?
  checking_account String?
  website String?
  telegram String?
  instagram String?
  twitter String?
  behance String?
  artstation String?
  authorization String?
  two_fa String?
  order Order[]
  backgrounds Backgrounds[]
  projects Project[]
  notifications Notification[]
}

model Notification {
  id           Int      @default(autoincrement()) @id
  text         String?
  date         DateTime? @default(now())
  type         String?
  status       String
  recipient    User?    @relation(fields: [recipient_id], references: [id])
  recipient_id Int?
}

model Project {
  id          Int     @default(autoincrement()) @id
  type        String?
  class       String?
  name        String?
  address     String?
  info        String?
  info_dop        String?
  images      String?
  files       Files[]
  city        String?
  links       String?
  status      String?  @default("add_information")
  comments    String?
  likes       Int?
  author      User?    @relation(fields: [author_id], references: [id])
  author_id   Int
  background  Backgrounds? @relation(fields: [background_id], references: [id])
  background_id Int?
  // order Order?
  // дополнительная информация
}

model Backgrounds {
  id          Int      @default(autoincrement()) @id
  path        String
  poster_path String
  type        String
  format      String
  name        String
  author      User    @relation(fields: [author_id], references: [id])
  author_id   Int
  project     Project[]
}

model Files {
  id          Int      @default(autoincrement()) @id
  path        String
  project     Project? @relation(fields: [project_id], references: [id])
  project_id  Int?
}

model Order {
  id                        Int      @default(autoincrement()) @id

  // personal_assistant        String?
  // technical_requirements    String?
  // placement_rules           String?
  // integration               String?

  name                      String
  phone                     String
  email                     String

  author                    User?    @relation(fields: [author_id], references: [id])
  author_id                 Int?
  // project                   Project? @relation(fields: [project_id], references: [id])
  // project_id                Int? @unique
}

// статусы проекта
// 1) Добавление информации add_information
// 2) Проверка (модерация)  moderation
// 3) Готов к использованию ready_to_use
// 4) Размещён в приложении hosted_app
// 5) Размещён в стриминге  hosted_streaming

// поле авторизации
// 1) telegram
// 2) apple
// 3) phone

// типы уведомлений
// 1) active_projects
// 2) operation_history
// 3) invoice_payments

// типы проекта
// 1) жилой комплекс residential_complex
// 2) коттеджный посёлок cottage_village
// 3) частный дом private_house
// 4) музей/галерея museum_gallery
// 5) прочее other